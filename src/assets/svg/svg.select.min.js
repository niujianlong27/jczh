/*! svg.select.js v2.1.2 MIT*/; !function () { "use strict"; function SelectHandler(el) { this.el = el, el.remember("_selectHandler", this), this.pointSelection = { isSelected: !1 }, this.rectSelection = { isSelected: !1 }, this.pointsList = { lt: [0, 0], rt: ["width", 0], rb: ["width", "height"], lb: [0, "height"], t: ["width / 2", 0], r: ["width", "height / 2"], b: ["width / 2", "height"], l: [0, "height / 2"] }, this.pointCoord = function (setting, object) { return "string" != typeof setting ? setting : eval("object." + setting) }, this.pointCoords = function (t, e) { var i = this.pointsList[t]; return { x: this.pointCoord(i[0], e), y: this.pointCoord(i[1], e) } } } SelectHandler.prototype.init = function (t, e) { var i = this.el.bbox(); this.options = {}; var s = this.el.selectize.defaults.points; for (var n in this.el.selectize.defaults) this.options[n] = this.el.selectize.defaults[n], void 0 !== e[n] && (this.options[n] = e[n]); var o = ["points", "pointsExclude"]; for (var n in o) { var r = this.options[o[n]]; "string" == typeof r ? r = r.length > 0 ? r.split(/\s*,\s*/i) : [] : "boolean" == typeof r && "points" === o[n] && (r = r ? s : []), this.options[o[n]] = r } this.options.points = [s, this.options.points].reduce(function (t, e) { return t.filter(function (t) { return e.indexOf(t) > -1 }) }), this.options.points = [this.options.points, this.options.pointsExclude].reduce(function (t, e) { return t.filter(function (t) { return e.indexOf(t) < 0 }) }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)), this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t) : this.selectRect(t), this.observe(), this.cleanup() }, SelectHandler.prototype.selectPoints = function (t) { return this.pointSelection.isSelected = t, this.pointSelection.set ? this : (this.pointSelection.set = this.parent.set(), this.drawCircles(), this) }, SelectHandler.prototype.getPointArray = function () { var t = this.el.bbox(); return this.el.array().valueOf().map(function (e) { return [e[0] - t.x, e[1] - t.y] }) }, SelectHandler.prototype.drawCircles = function () { for (var t = this, e = this.getPointArray(), i = 0, s = e.length; i < s; ++i) { var n = function (e) { return function (i) { i = i || window.event, i.preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation(); var s = i.pageX || i.touches[0].pageX, n = i.pageY || i.touches[0].pageY; t.el.fire("point", { x: s, y: n, i: e, event: i }) } }(i); this.pointSelection.set.add(this.nested.circle(this.options.radius).center(e[i][0], e[i][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", n).on("mousedown", n)) } }, SelectHandler.prototype.updatePointSelection = function () { var t = this.getPointArray(); this.pointSelection.set.each(function (e) { this.cx() === t[e][0] && this.cy() === t[e][1] || this.center(t[e][0], t[e][1]) }) }, SelectHandler.prototype.updateRectSelection = function () { var t = this, e = this.el.bbox(); if (this.rectSelection.set.get(0).attr({ width: e.width, height: e.height }), this.options.points.length && this.options.points.map(function (i, s) { var n = t.pointCoords(i, e); t.rectSelection.set.get(s + 1).center(n.x, n.y) }), this.options.rotationPoint) { var i = this.rectSelection.set.length(); this.rectSelection.set.get(i - 1).center(e.width / 2, 20) } }, SelectHandler.prototype.selectRect = function (t) { function e(t) { return function (e) { e = e || window.event, e.preventDefault ? e.preventDefault() : e.returnValue = !1, e.stopPropagation(); var s = e.pageX || e.touches[0].pageX, n = e.pageY || e.touches[0].pageY; i.el.fire(t, { x: s, y: n, event: e }) } } var i = this, s = this.el.bbox(); if (this.rectSelection.isSelected = t, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(s.width, s.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) { this.options.points.map(function (t, n) { var o = i.pointCoords(t, s); i.rectSelection.set.add(i.nested.circle(i.options.radius).center(o.x, o.y).attr("class", i.options.classPoints + "_" + t).on("mousedown", e(t)).on("touchstart", e(t))) }), this.rectSelection.set.each(function () { this.addClass(i.options.classPoints) }) } if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) { var n = function (t) { t = t || window.event, t.preventDefault ? t.preventDefault() : t.returnValue = !1, t.stopPropagation(); var e = t.pageX || t.touches[0].pageX, s = t.pageY || t.touches[0].pageY; i.el.fire("rot", { x: e, y: s, event: t }) }; this.rectSelection.set.add(this.nested.circle(this.options.radius).center(s.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", n).on("mousedown", n)) } }, SelectHandler.prototype.handler = function () { var t = this.el.bbox(); this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection() }, SelectHandler.prototype.observe = function () { var t = this; if (MutationObserver) if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function () { t.handler() }), this.observerInst.observe(this.el.node, { attributes: !0 }); else try { this.observerInst.disconnect(), delete this.observerInst } catch (t) { } else this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function () { t.handler() }) }, SelectHandler.prototype.cleanup = function () { !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function () { this.remove() }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function () { this.remove() }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested) }, SVG.extend(SVG.Element, { selectize: function (t, e) { return "object" == typeof t && (e = t, t = !0), (this.remember("_selectHandler") || new SelectHandler(this)).init(void 0 === t || t, e || {}), this } }), SVG.Element.prototype.selectize.defaults = { points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"], pointsExclude: [], classRect: "svg_select_boundingRect", classPoints: "svg_select_points", radius: 7, rotationPoint: !0, deepSelect: !1 } }();